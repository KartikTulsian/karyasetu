generator client {
  provider      = "prisma-client-js"
  // output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          String               @id @default(uuid())
  name             String
  email            String               @unique
  password         String
  college_name     String
  course           String
  year             Int
  profile_pic_url  String?
  bio              String?
  phone_number     String?
  organisedEvents  Event[]              @relation("Organiser")
  uploadedMedia    EventGallery[]
  participations   EventParticipation[]
  createdOffers    Offer[]
  announcedResults Result[]
  createdTeams     Team[]               @relation("TeamCreator")
}

model Event {
  event_id              String               @id @default(uuid())
  title                 String
  description           String
  date                  DateTime
  start_time            DateTime
  end_time              DateTime
  venue                 String
  organising_committee  String?
  entry_fee             Float?
  registration_link     String?
  use_custom_form       Boolean              @default(false)
  poster_url            String?
  max_team_size         Int?
  registration_deadline DateTime?
  event_status          EventStatus
  visibility            Visibility
  category              EventCategory
  organiser_user_id     String
  organiser             User                 @relation("Organiser", fields: [organiser_user_id], references: [user_id])
  clubs                 EventClubMapping[]
  gallery               EventGallery[]
  participations        EventParticipation[]
  offers                Offer[]
  results               Result[]
  teams                 Team[]

  @@index([organiser_user_id])
}

model EventParticipation {
  participation_id String   @id @default(uuid())
  user_id          String
  event_id         String
  team_id          String?
  joined_at        DateTime @default(now())
  is_team_leader   Boolean  @default(false)
  event            Event    @relation(fields: [event_id], references: [event_id])
  team             Team?    @relation(fields: [team_id], references: [team_id])
  user             User     @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, event_id])
  @@index([team_id])
}

model Team {
  team_id     String               @id @default(uuid())
  team_name   String
  event_id    String
  created_by  String
  max_members Int
  created_at  DateTime             @default(now())
  members     EventParticipation[]
  creator     User                 @relation("TeamCreator", fields: [created_by], references: [user_id])
  event       Event                @relation(fields: [event_id], references: [event_id])

  @@index([event_id])
}

model Offer {
  offer_id            String    @id @default(uuid())
  title               String
  description         String
  created_by          String
  event_id            String?
  target_group_type   GroupType
  target_college_name String?
  target_event_id     String?
  offer_type          OfferType
  created_at          DateTime  @default(now())
  creator             User      @relation(fields: [created_by], references: [user_id])
  event               Event?    @relation(fields: [event_id], references: [event_id])

  @@index([target_event_id])
  @@index([created_by])
}

model Result {
  result_id    String    @id @default(uuid())
  event_id     String
  announced_by String
  result_text  String
  media_url    String?
  visible_to   GroupType
  created_at   DateTime  @default(now())
  announcer    User      @relation(fields: [announced_by], references: [user_id])
  event        Event     @relation(fields: [event_id], references: [event_id])

  @@index([event_id])
}

model EventGallery {
  media_id    String    @id @default(uuid())
  event_id    String
  uploaded_by String
  media_url   String
  media_type  MediaType
  uploaded_at DateTime  @default(now())
  event       Event     @relation(fields: [event_id], references: [event_id])
  uploader    User      @relation(fields: [uploaded_by], references: [user_id])
}

model Club {
  club_id      String             @id @default(uuid())
  name         String
  college_name String
  description  String?
  eventLinks   EventClubMapping[]
}

model EventClubMapping {
  id       String @id @default(uuid())
  event_id String
  club_id  String
  club     Club   @relation(fields: [club_id], references: [club_id])
  event    Event  @relation(fields: [event_id], references: [event_id])

  @@unique([event_id, club_id])
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

enum Visibility {
  PUBLIC
  COLLEGE
  GROUP
}

enum OfferType {
  TEAM_RECRUITMENT
  ANNOUNCEMENT
}

enum GroupType {
  ALL
  COLLEGE
  EVENT_PARTICIPANTS
}

enum MediaType {
  IMAGE
  VIDEO
}

enum EventCategory {
  TECHNICAL
  CULTURAL
  SEMINAR
  WORKSHOP
  SPORTS
  HACKATHON
  QUIZ
  DRAMATICS
  MUSIC
  DANCE
  LITERARY
  ART
  MANAGEMENT
  SOCIAL
}
